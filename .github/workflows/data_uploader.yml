name: data_uploader_daily

on:
  workflow_dispatch:
  schedule:
    # 08:00–22:00 ET (EDT=UTC-4) => 12:00–02:00 UTC
    - cron: '0 12-23,0-2 * * *'

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      BEARER_TOKEN:     ${{ secrets.BEARER_TOKEN }}
      DATABASE_URL:     ${{ secrets.DATABASE_URL }}
      DISCORD_WEBHOOK:  ${{ secrets.DISCORD_WEBHOOK }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install cfbd pandas numpy SQLAlchemy pg8000 python-dotenv certifi filelock
          fi

      - name: Run uploader
        id: run_uploader
        run: |
          set -o pipefail
          python data_uploader.py 2>&1 | tee uploader.log

      - name: Parse upsert count
        id: stats
        run: |
          UPS=$(grep -Eo 'Upserted rows: [0-9]+' uploader.log | awk '{print $3}' | tail -1)
          UPS=${UPS:-0}
          echo "upserted=$UPS" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: uploader-log
          path: uploader.log
          retention-days: 7

      - name: Notify Discord (success)
        if: success() && env.DISCORD_WEBHOOK != ''
        env:
          WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          UPS="${{ steps.stats.outputs.upserted }}"
          CHANGES=$(grep -E '^DISCORD_DIFF ' uploader.log | sed 's/^DISCORD_DIFF //' | tail -n 12 | sed 's/"/\\"/g' | awk 'BEGIN{ORS="\\n"}{print}')
          NEWROWS=$(grep -E '^DISCORD_NEW ' uploader.log  | sed 's/^DISCORD_NEW //'  | tail -n 12 | sed 's/"/\\"/g' | awk 'BEGIN{ORS="\\n"}{print}')
          [ -z "$CHANGES" ] && CHANGES="(none)"
          [ -z "$NEWROWS" ] && NEWROWS="(none)"
          payload=$(cat <<'JSON'
          {"username":"CFB Uploader","embeds":[{"title":"✅ data_uploader succeeded","description":"Branch: **${{ github.ref_name }}**\nUpserted rows: **UPS_PLACEHOLDER**\n\n**Changes (tail)**\n```CHANGES_PLACEHOLDER```\n**New rows (tail)**\n```NEW_PLACEHOLDER```","url":"RUN_URL_PLACEHOLDER","timestamp":"NOW_PLACEHOLDER","color":3066993}]}
          JSON
          )
          payload=${payload//UPS_PLACEHOLDER/"$UPS"}
          payload=${payload//RUN_URL_PLACEHOLDER/"$RUN_URL"}
          payload=${payload//NOW_PLACEHOLDER/"$NOW"}
          payload=${payload//CHANGES_PLACEHOLDER/"$CHANGES"}
          payload=${payload//NEW_PLACEHOLDER/"$NEWROWS"}
          curl -sS -H "Content-Type: application/json" -d "$payload" "$WEBHOOK"

      - name: Notify Discord (failure)
        if: failure() && env.DISCORD_WEBHOOK != ''
        env:
          WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          payload=$(cat <<'JSON'
          {"username":"CFB Uploader","embeds":[{"title":"❌ data_uploader failed","description":"Branch: **${{ github.ref_name }}**\nSee run logs for details.","url":"RUN_URL_PLACEHOLDER","timestamp":"NOW_PLACEHOLDER","color":15158332}]}
          JSON
          )
          payload=${payload//RUN_URL_PLACEHOLDER/"$RUN_URL"}
          payload=${payload//NOW_PLACEHOLDER/"$NOW"}
          curl -sS -H "Content-Type: application/json" -d "$payload" "$WEBHOOK"
