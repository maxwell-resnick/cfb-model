name: data_uploader_daily

on:
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Bypass NY time gate (true/false)'
        required: false
        default: 'false'
      simulate_failure:
        description: 'Force a failure to test notifications (true/false)'
        required: false
        default: 'false'
  schedule:
    - cron: "0 * * * *"  # hourly (UTC)

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      FORCE_RUN: ${{ github.event.inputs.force_run }}
      SIM_FAIL:  ${{ github.event.inputs.simulate_failure }}

    steps:
      - name: Time gate (run only 07–22 America/New_York, unless forced)
        id: timegate
        run: |
          if [ "${FORCE_RUN}" = "true" ]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "Force-run enabled; skipping time window check."
            exit 0
          fi
          HOUR_NY=$(TZ=America/New_York date +%H)
          echo "Local NY hour: $HOUR_NY"
          if [ "$HOUR_NY" -ge 7 ] && [ "$HOUR_NY" -le 22 ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "Outside 07–22 NY window. Skipping."
          fi

      - uses: actions/checkout@v4
        if: steps.timegate.outputs.run == 'true'

      - uses: actions/setup-python@v5
        if: steps.timegate.outputs.run == 'true'
        with:
          python-version: "3.11"

      - name: Install deps
        if: steps.timegate.outputs.run == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            # ensure 'requests' is available even if not listed
            pip install requests
          else
            pip install cfbd pandas numpy SQLAlchemy pg8000 python-dotenv certifi filelock requests
          fi

      - name: Run uploader
        if: steps.timegate.outputs.run == 'true'
        id: run_uploader
        run: |
          set -o pipefail
          python data_uploader.py 2>&1 | tee uploader.log

      - name: Parse upsert count
        if: steps.timegate.outputs.run == 'true'
        id: stats
        run: |
          UPS=$(grep -Eo 'Upserted rows: [0-9]+' uploader.log | awk '{print $3}' | tail -1)
          UPS=${UPS:-0}
          echo "upserted=$UPS" >> $GITHUB_OUTPUT
          echo "Parsed Upserted rows: $UPS"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: uploader-log
          path: uploader.log
          retention-days: 7

      # --- Test failure on demand
      - name: Simulate failure (for testing notifications)
        if: steps.timegate.outputs.run == 'true' && env.SIM_FAIL == 'true'
        run: |
          echo "Simulating failure as requested." >&2
          exit 1

      # --- Discord: success
      - name: Notify Discord (success)
        if: steps.timegate.outputs.run == 'true' && success() && env.DISCORD_WEBHOOK != ''
        env:
          WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          UPS="${{ steps.stats.outputs.upserted }}"
          PAYLOAD=$(cat <<'JSON'
          {"username":"CFB Uploader","embeds":[{"title":"✅ data_uploader succeeded","description":"Branch: **${{ github.ref_name }}**\nUpserted rows: **UPS_PLACEHOLDER**","url":"RUN_URL_PLACEHOLDER","timestamp":"NOW_PLACEHOLDER","color":3066993}]}
          JSON
          )
          PAYLOAD=${PAYLOAD//UPS_PLACEHOLDER/"$UPS"}
          PAYLOAD=${PAYLOAD//RUN_URL_PLACEHOLDER/"$RUN_URL"}
          PAYLOAD=${PAYLOAD//NOW_PLACEHOLDER/"$NOW"}
          curl -sS -H "Content-Type: application/json" -d "$PAYLOAD" "$WEBHOOK"

      # --- Discord: failure
      - name: Notify Discord (failure)
        if: steps.timegate.outputs.run == 'true' && failure() && env.DISCORD_WEBHOOK != ''
        env:
          WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          PAYLOAD=$(cat <<'JSON'
          {"username":"CFB Uploader","embeds":[{"title":"❌ data_uploader failed","description":"Branch: **${{ github.ref_name }}**\nSee run logs for details.","url":"RUN_URL_PLACEHOLDER","timestamp":"NOW_PLACEHOLDER","color":15158332}]}
          JSON
          )
          PAYLOAD=${PAYLOAD//RUN_URL_PLACEHOLDER/"$RUN_URL"}
          PAYLOAD=${PAYLOAD//NOW_PLACEHOLDER/"$NOW"}
          curl -sS -H "Content-Type: application/json" -d "$PAYLOAD" "$WEBHOOK"
