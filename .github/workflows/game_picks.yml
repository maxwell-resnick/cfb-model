name: game_picks

on:
  workflow_dispatch:
  schedule:
    # Trigger every 15 minutes (UTC); time gate below enforces 08:15–22:15 America/New_York
    - cron: "*/15 * * * *"

permissions:
  contents: read

concurrency:
  group: game_picks-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      DATABASE_URL:       ${{ secrets.DATABASE_URL }}
      GAME_PICK_WEBHOOK:  ${{ secrets.GAME_PICK_WEBHOOK }}
      # If you store Odds API key as a secret, uncomment:
      # ODDS_API_KEY:        ${{ secrets.ODDS_API_KEY }}
      R_KEEP_PKG_SOURCE:  no

    steps:
      - name: Time gate (run only 08:15–22:15 America/New_York)
        id: timegate
        run: |
          HOUR_NY=$(TZ=America/New_York date +%H)
          MIN_NY=$(TZ=America/New_York date +%M)
          echo "NY time: $HOUR_NY:$MIN_NY"
          if [ "$MIN_NY" -eq 15 ] && [ "$HOUR_NY" -ge 8 ] && [ "$HOUR_NY" -le 22 ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "Outside 08:15–22:15 NY window. Skipping."
          fi

      - uses: actions/checkout@v4
        if: steps.timegate.outputs.run == 'true'

      # R with Posit Public Package Manager binaries
      - uses: r-lib/actions/setup-r@v2
        if: steps.timegate.outputs.run == 'true'
        with:
          r-version: '4.4.1'
          use-public-rspm: true

      # Install & cache CRAN packages your script loads (no comments here!)
      - uses: r-lib/actions/setup-r-dependencies@v2
        if: steps.timegate.outputs.run == 'true'
        with:
          cache: true
          packages: |
            any::DBI
            any::RPostgres
            any::dplyr
            any::tidyr
            any::glue
            any::qs
            any::xgboost
            any::slider
            any::lubridate
            any::jsonlite
            any::httr
            any::glmmTMB
            any::TMB
            any::stringr
            any::purrr

      # Install oddsapiR from SportsDataverse R-Universe (not CRAN)
      - name: Install oddsapiR (R-Universe)
        if: steps.timegate.outputs.run == 'true'
        shell: bash
        run: |
          Rscript -e 'install.packages("oddsapiR", repos=c("https://sportsdataverse.r-universe.dev","https://cloud.r-project.org"))'

      # Parse DATABASE_URL into libpq env vars for RPostgres
      - name: Export DB env vars from DATABASE_URL
        if: steps.timegate.outputs.run == 'true'
        shell: bash
        run: |
          python - <<'PY' >> "$GITHUB_ENV"
          import os
          from urllib.parse import urlparse
          url = os.environ.get("DATABASE_URL", "")
          if not url:
              raise SystemExit("DATABASE_URL is missing")
          u = urlparse(url)
          print(f"PGHOST={u.hostname}")
          print(f"PGPORT={u.port or 5432}")
          print(f"PGDATABASE={u.path.lstrip('/')}")
          print(f"PGUSER={u.username}")
          print(f"PGPASSWORD={u.password}")
          # also set the R fallback your script sometimes checks
          print(f"NEON_PG_PASS={u.password}")
          PY

      - name: Run opening_line_preds.R
        if: steps.timegate.outputs.run == 'true'
        shell: bash
        env:
          GAME_PICK_WEBHOOK: ${{ env.GAME_PICK_WEBHOOK }}
        run: |
          set -o pipefail
          Rscript --vanilla opening_line_preds.R 2>&1 | tee r_run.log

      - name: Upload run log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: r-run-log
          path: r_run.log
          retention-days: 7

      # Fallback Discord alert if the workflow fails before the script posts anything
      - name: Notify Discord on failure
        if: steps.timegate.outputs.run == 'true' && failure() && env.GAME_PICK_WEBHOOK != ''
        env:
          WEBHOOK: ${{ env.GAME_PICK_WEBHOOK }}
        shell: bash
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          payload=$(cat <<'JSON'
          {
            "username":"OpeningLine Bot",
            "embeds":[
              {
                "title":"❌ opening_line_preds failed",
                "description":"Branch: **${{ github.ref_name }}**\nSee run logs for details.",
                "url":"RUN_URL_PLACEHOLDER",
                "timestamp":"NOW_PLACEHOLDER",
                "color":15158332
              }
            ]
          }
          JSON
          )
          payload=${payload//RUN_URL_PLACEHOLDER/"$RUN_URL"}
          payload=${payload//NOW_PLACEHOLDER/"$NOW"}
          curl -sS -H "Content-Type: application/json" -d "$payload" "$WEBHOOK"


