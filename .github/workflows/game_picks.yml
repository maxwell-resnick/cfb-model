name: game_picks

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"   # every 30 minutes (UTC)

permissions:
  contents: read

concurrency:
  group: game_picks-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      DATABASE_URL:       ${{ secrets.DATABASE_URL }}
      GAME_PICK_WEBHOOK:  ${{ secrets.GAME_PICK_WEBHOOK }}
      R_KEEP_PKG_SOURCE:  no

    steps:
      - uses: actions/checkout@v4

      # Fast R + Posit Package Manager (binary CRAN)
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.1'
          use-public-rspm: true

      # Install & cache only the packages your script loads
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          packages: |
          any::DBI
          any::RPostgres
          any::dplyr
          any::tidyr
          any::glue
          any::qs
          any::xgboost
          any::slider
          any::lubridate
          any::jsonlite
          any::httr
          any::glmmTMB
          any::TMB
          
      # Parse DATABASE_URL -> libpq env vars so RPostgres authenticates
      - name: Export DB env vars from DATABASE_URL
        shell: bash
        run: |
          python - <<'PY' >> "$GITHUB_ENV"
          import os
          from urllib.parse import urlparse
          url = os.environ.get("DATABASE_URL", "")
          if not url:
              raise SystemExit("DATABASE_URL is missing")
          u = urlparse(url)
          print(f"PGHOST={u.hostname}")
          print(f"PGPORT={u.port or 5432}")
          print(f"PGDATABASE={u.path.lstrip('/')}")
          print(f"PGUSER={u.username}")
          print(f"PGPASSWORD={u.password}")
          # also set the R fallback your script sometimes checks
          print(f"NEON_PG_PASS={u.password}")
          PY

      - name: Run opening_line_preds.R
        env:
          # Your R script expects DISCORD_WEBHOOK; map from GAME_PICK_WEBHOOK
          DISCORD_WEBHOOK: ${{ env.GAME_PICK_WEBHOOK }}
          # DATABASE_URL is still available if you later choose to read it in R
          DATABASE_URL:    ${{ env.DATABASE_URL }}
        shell: bash
        run: |
          set -o pipefail
          Rscript --vanilla opening_line_preds.R 2>&1 | tee r_run.log

      - name: Upload run log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: r-run-log
          path: r_run.log
          retention-days: 7

      # Fallback Discord alert on workflow failure (your R script posts success)
      - name: Notify Discord on failure
        if: failure() && env.GAME_PICK_WEBHOOK != ''
        env:
          WEBHOOK: ${{ env.GAME_PICK_WEBHOOK }}
        shell: bash
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          payload=$(cat <<'JSON'
          {
            "username":"OpeningLine Bot",
            "embeds":[
              {
                "title":"❌ opening_line_preds failed",
                "description":"Branch: **${{ github.ref_name }}**\nSee run logs for details.",
                "url":"RUN_URL_PLACEHOLDER",
                "timestamp":"NOW_PLACEHOLDER",
                "color":15158332
              }
            ]
          }
          JSON
          )
          payload=${payload//RUN_URL_PLACEHOLDER/"$RUN_URL"}
          payload=${payload//NOW_PLACEHOLDER/"$NOW"}
          curl -sS -H "Content-Type: application/json" -d "$payload" "$WEBHOOK"

